//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/YOP_Package/Feedback System/Mapping/TrelloManagerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TrelloManagerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TrelloManagerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TrelloManagerInput"",
    ""maps"": [
        {
            ""name"": ""Interface"",
            ""id"": ""799a5df1-3719-4b2f-8362-482ac4579d8d"",
            ""actions"": [
                {
                    ""name"": ""OpenClosePanel"",
                    ""type"": ""Value"",
                    ""id"": ""402cc11c-77af-425e-a76e-b0bc696c1d39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e93db6c8-f335-4330-bb4c-e697095be106"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InterfaceControls"",
                    ""action"": ""OpenClosePanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""InterfaceControls"",
            ""bindingGroup"": ""InterfaceControls"",
            ""devices"": []
        }
    ]
}");
        // Interface
        m_Interface = asset.FindActionMap("Interface", throwIfNotFound: true);
        m_Interface_OpenClosePanel = m_Interface.FindAction("OpenClosePanel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interface
    private readonly InputActionMap m_Interface;
    private IInterfaceActions m_InterfaceActionsCallbackInterface;
    private readonly InputAction m_Interface_OpenClosePanel;
    public struct InterfaceActions
    {
        private @TrelloManagerInput m_Wrapper;
        public InterfaceActions(@TrelloManagerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenClosePanel => m_Wrapper.m_Interface_OpenClosePanel;
        public InputActionMap Get() { return m_Wrapper.m_Interface; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InterfaceActions set) { return set.Get(); }
        public void SetCallbacks(IInterfaceActions instance)
        {
            if (m_Wrapper.m_InterfaceActionsCallbackInterface != null)
            {
                @OpenClosePanel.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnOpenClosePanel;
                @OpenClosePanel.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnOpenClosePanel;
                @OpenClosePanel.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnOpenClosePanel;
            }
            m_Wrapper.m_InterfaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenClosePanel.started += instance.OnOpenClosePanel;
                @OpenClosePanel.performed += instance.OnOpenClosePanel;
                @OpenClosePanel.canceled += instance.OnOpenClosePanel;
            }
        }
    }
    public InterfaceActions @Interface => new InterfaceActions(this);
    private int m_InterfaceControlsSchemeIndex = -1;
    public InputControlScheme InterfaceControlsScheme
    {
        get
        {
            if (m_InterfaceControlsSchemeIndex == -1) m_InterfaceControlsSchemeIndex = asset.FindControlSchemeIndex("InterfaceControls");
            return asset.controlSchemes[m_InterfaceControlsSchemeIndex];
        }
    }
    public interface IInterfaceActions
    {
        void OnOpenClosePanel(InputAction.CallbackContext context);
    }
}
